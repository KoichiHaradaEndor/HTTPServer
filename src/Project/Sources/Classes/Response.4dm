/**
* Response class
*
* DO NOT USE THIS CLASS DIRECTLY.
* THIS CLASS WILL BE INSTANTIATED INTERNALLY.
*
* For more details, please refer to {@link Response.About Response Object}.
*
* @author: HARADA Koichi
*/

Class constructor
	
/**
* @param {Object} $1 Request object
*/
	
	C_OBJECT:C1216($1; $webServer_o)
	C_OBJECT:C1216($2; $request_o)
	
	$webServer_o:=$1
	$request_o:=$2
	
	//#####
	// Properties
	//#####
	This:C1470.locals:=New object:C1471()
	This:C1470.__headers__:=New collection:C1472()
	This:C1470.__request__:=$request_o
	This:C1470.__webServer__:=$webServer_o
	
Function append
	
/**
* This method appends the specified value to the
* specified HTTP response header field.
* If the header is not already set, it creates
* the field. If it is already present, it is appended
* to the existing value separated by comma ','.
*
* Exception to the above is "Set-Cookie". In this case, 
* another entry will be created. However, to set cookies
* using Response.cookie is preferable.
*
* The value can be either text or collection.
*
* @param {Text} $1 Field name
* @param {Variant} $2 Field value, text or collection
* @return {Object} $0 Response object
* @author HARADA Koichi
*/
	
	C_TEXT:C284($1; $fieldName_t)
	C_VARIANT:C1683($2)
	C_OBJECT:C1216($0)
	
	C_LONGINT:C283($type_l)
	C_TEXT:C284($flag_t; $currentValue_t)
	C_COLLECTION:C1488($queryResult_c)
	
	$fieldName_t:=$1
	
	$type_l:=Value type:C1509($2)
	
	If ($fieldName_t="Set-Cookie")
		
		// In case of set-cookie, always create another entry.
		$flag_t:="create"
		
	Else 
		
		// In case of not set-cookie, check if its already present
		$queryResult_c:=This:C1470.__headers__.query("name = :1"; $fieldName_t)
		If ($queryResult_c.length=0)
			
			// If the field is not present, create one
			$flag_t:="create"
			
		Else 
			
			// If the field is present, append the data with comma
			$flag_t:="append"
			
		End if 
		
	End if 
	
	Case of 
		: ($flag_t="create")
			
			Case of 
				: ($type_l=Is text:K8:3)
					
					This:C1470.__headers__.push(New object:C1471("name"; $fieldName_t; "value"; $2))
					
				: ($type_l=Is collection:K8:32)
					
					This:C1470.__headers__.push(New object:C1471("name"; $fieldName_t; "value"; $2.join(", ")))
					
			End case 
			
		: ($flag_t="append")
			
			// Each $queryResult_c item is the same reference as the one of This.__headers__
			Case of 
				: ($type_l=Is text:K8:3)
					
					$currentValue_t:=$queryResult_c[0].value
					$queryResult_c[0].value:=$currentValue_t+", "+$2
					
				: ($type_l=Is collection:K8:32)
					
					$currentValue_t:=$queryResult_c[0].value
					$queryResult_c[0].value:=$currentValue_t+", "+$2.join(", ")
					
			End case 
			
	End case 
	
	$0:=This:C1470
	
Function attachment
	
/**
* This method sets HTTP response "Content-Disposition"
* header field to "attachement". If optional filename
* parameter is given, it adds Content-Disposition
* "filename" parameter and sets "Content-Type" header
* field using Response.type(). Note it accepts POSIX
* path for filename parameter, not system path. Also 
* it does not check the validity of the filename.
* Note it does not send file as response. Using
* Response.download function does setting headers
* and sending a file.
*
* @param {Text} $1 Filename (optional)
* @return {Object} $0 Response object
* @author HARADA Koichi
*/
	
	C_TEXT:C284($1; $filename_t)
	C_OBJECT:C1216($0)
	
	C_TEXT:C284($headerValue_t)
	C_OBJECT:C1216($file_o)
	
	$headerValue_t:="attachment"
	If (Count parameters:C259>0)
		
		$filename_t:=$1
		
		$file_o:=File:C1566($filename_t)
		$headerValue_t:=$headerValue_t+"; filename=\""+$file_o.fullName+"\""
		
		This:C1470.type($file_o.extension)
		
	End if 
	
	This:C1470.set("Content-Disposition"; $headerValue_t)
	
	$0:=This:C1470
	
Function cookie
	
/**
* This method is used to set cookie name and value.
*
* When Object is passed as second parameter, it will be
* converted to JSON.
*
* For options, following properties can be specified.
*
* domain {Text} : 
* Domain name for the cookie. Default is not set.
* Note that setting this option does not improve security.
* When it is not set, cookie is sent to origin domain only.
* If it is set, cookie will be sent to origin and its sub domains.
* So set this property when cookie should act like that.
*
* encode {Object} :
* Project method used to encode cookie value.
* The method takes text parameter which is cookie value,
* then return encoded value. This property receives method reference
* generated by Formula command. When it is not specified, the default
* encoding is encodeURIComponent.
*
* expires {Object} :
* Expire date and time of the cookie. The object consists of two
* properties which are "date" and "time" whose types are date and
* time respectively.
* Note: 4D object stores date type value in two ways, one is 4D's
* native date type and the other is ISO date format string.
* This method assumes the object stores native 4D date type.
* 
* httpOnly {Boolean} :
* Flag that indicates the cookie is not accessible from browser script.
* When it is not specified, default to true.
*
* maxAge {Longint} :
* Convenient option for setting expire date time relative to the 
* current date time in seconds. When given less than or equal to 0
* value, the cookie should expire immediately.
* When both Expires and maxAge are present, maxAge will have priority.
*
* path {Text} :
* Path for the cookie. Defaults to "/".
*
* secure {Boolean} :
* Marks the cookie to be used with HTTPS connection only.
* Warning: When this option is set, the connection should
* be established under HTTPS. Otherwise, the cookie will
* be sent via unsecured way which can be intercepted.
* Modern browsers refuse to set such cookies.
*
* sameSite {Text} :
* Value of the "SameSite" cookie attribute.
* The value can be one of "None", "Lax" or "Strict".
* If the value is NOT one of the above, it is not set.
* 
* @param {Text} $1 Name of the cookie
* @param {Variant} $2 Value of the cookie, Text or Object
* @param {Object} $3 Options of the cookie (optional)
* @return {Object} $0 Response object
* @author HARADA Koichi
*/
	
	C_TEXT:C284($1; $cookieName_t)
	C_VARIANT:C1683($2)
	C_OBJECT:C1216($3; $options_o)
	C_OBJECT:C1216($0)
	
	C_LONGINT:C283($numParam_l; $type_l)
	C_TEXT:C284($cookie_t; $cookieValue_t)
	
	$numParam_l:=Count parameters:C259
	
	$cookieName_t:=$1
	
	// <cookie-name>=<cookie-value>
	$cookie_t:=$cookieName_t+"="
	
	$type_l:=Value type:C1509($2)
	Case of 
		: ($type_l=Is text:K8:3)
			$cookieValue_t:=$2
			
		: ($type_l=Is object:K8:27)
			$cookieValue_t:=JSON Stringify:C1217($2)
			
	End case 
	
	If ($numParam_l>=3)
		
		$options_o:=$3
		
	Else 
		
		// Set option default values
		$options_o:=New object:C1471(\
			"httpOnly"; True:C214; \
			"path"; "/"\
			)
		
	End if 
	
	If ($options_o.encode#Null:C1517)
		
		// use specified encoding
		$cookieValue_t:=$options_o.encode($cookieValue_t)
		
	Else 
		
		// use default encoding
		$cookieValue_t:=encodeURIComponent($cookieValue_t)
		
	End if 
	
	$cookie_t:=$cookie_t+$cookieValue_t
	
	// Expires=<date>
	If ($options_o.expires#Null:C1517) & ($options_o.maxAge=Null:C1517)
		
		$cookie_t:=$cookie_t+"; Expires="+String:C10($options_o.expires.date; Date RFC 1123:K1:11; Time:C179($options_o.expires.time))
		
	End if 
	
	// Max-Age=<number>
	If ($options_o.maxAge#Null:C1517)
		
		$cookie_t:=$cookie_t+"; Max-Age="+String:C10($options_o.maxAge)
		
	End if 
	
	// Domain=<domain-value>
	If ($options_o.domain#Null:C1517)
		
		$cookie_t:=$cookie_t+"; Domain="+String:C10($options_o.domain)
		
	End if 
	
	// Path=<path-value>
	If ($options_o.path#Null:C1517)
		
		$cookie_t:=$cookie_t+"; Path="+$options_o.path
		
	Else 
		
		$cookie_t:=$cookie_t+"; Path=/"
		
	End if 
	
	// Secure
	Case of 
		: ($options_o.secure=Null:C1517)
		: ($options_o.secure=False:C215)
		Else 
			
			$cookie_t:=$cookie_t+"; Secure"
			
	End case 
	
	// HttpOnly
	Case of 
		: ($options_o.httpOnly=Null:C1517)
			
			$cookie_t:=$cookie_t+"; HttpOnly"
			
		: ($options_o.httpOnly)
			
			$cookie_t:=$cookie_t+"; HttpOnly"
			
	End case 
	
	// SameSite=<samesite-value>
	Case of 
		: ($options_o.sameSite=Null:C1517)
			
		: ($options_o.sameSite="Strict")
			
			$cookie_t:=$cookie_t+"; SameSite="+$options_o.sameSite
			
		: ($options_o.sameSite="Lax")
			
			$cookie_t:=$cookie_t+"; SameSite="+$options_o.sameSite
			
		: ($options_o.sameSite="None")
			
			$cookie_t:=$cookie_t+"; SameSite="+$options_o.sameSite
			
	End case 
	
	$0:=This:C1470.append("Set-Cookie"; $cookie_t)
	
Function clearCookie
	
/**
* This method is used to tell browser to clear browser
* cookie. This is done by setting maxAge property value
* to 0.
*
* Note that options must identical to existing cookie
* except expires and maxAge, otherwise the cookie will
* not be cleared.
* 
* @param {Text} $1 Name of the cookie
* @param {Object} $2 Options of the cookie
* @return {Object} $0 Response object
* @author HARADA Koichi
*/
	
	C_TEXT:C284($1; $cookieName_t)
	C_OBJECT:C1216($2; $options_o)
	C_OBJECT:C1216($0)
	
	$cookieName_t:=$1
	
	If (Count parameters:C259>=2)
		
		$options_o:=$2
		$options_o.maxAge:=0
		
	Else 
		
		$options_o:=New object:C1471("maxAge"; 0)
		
	End if 
	
	$0:=This:C1470.cookie($cookieName_t; ""; $options_o)
	
Function download
	
/**
* This method sets "Content-Disposition" header value
* to "attachment" with filename and "Content-Type" header
* value according to the file extension specified, then
* send the file.
*
* This function internally calls {@Link Response.sendFile}
* function, by passing path, options and callback parameters.
* For detail of those parameters, please refer to the
* description of that function.
*
* Addition to the above, please note the following:
* The file name that appears on browser side is set in
* filename parameter of Content-Disposition header.
* By default actual filename is set. However
* if its unfavorable (ex. when actual filename is 
* "temp-012345.pdf" but "meaningful-filename.pdf" should
* appear on client side), it can be overwritten by 
* specifying second filename parameter.
* If it's empty or omitted, then original name is used.
*
* The options parameter will be passed to Response.sendFile
* function. So it takes the same attributes. 
*
* It is equivalent to following calls:
* {@code
* Response.attachment() // set headers
* Response.sendFile() // send file
* }
* 
* @param {Text} $1 File path to send
* @param {Text} $2 Filename used to override actual file name (optional)
* @param {Object} $3 Options to be passed to Response.sendFile() (optional)
* @param {Object} $4 Reference to post process handler function (optional)
* @return {Object} $0 Response object
* @author HARADA Koichi
*/
	
	C_TEXT:C284($1; $path_t)
	C_TEXT:C284($2; $filename_t)
	C_OBJECT:C1216($3; $options_o)
	C_OBJECT:C1216($4; $callback_o)
	C_OBJECT:C1216($0)
	
	C_LONGINT:C283($numParam_l)
	
	$numParam_l:=Count parameters:C259
	
	$path_t:=$1
	
	If ($numParam_l>=2)
		
		$filename_t:=$2
		
	Else 
		
		$filename_t:=""
		
	End if 
	
	If ($numParam_l>=3)
		
		$options_o:=$3
		
	Else 
		
		$options_o:=Null:C1517
		
	End if 
	
	If ($numParam_l>=4)
		
		$callback_o:=$4
		
	Else 
		
		$callback_o:=Null:C1517
		
	End if 
	
	// sets Content-Disposition and Content-Type headers
	This:C1470.attachment(Choose:C955($filename_t=""; $path_t; $filename_t))
	This:C1470.sendFile($path_t; $options_o; $callback_o)
	
	$0:=This:C1470
	
Function end
	
/**
* This method is used to end the response process.
* Use this method when no data is sent as response body
* but only headers are sent.
*
* @return {Object} $0 Response object
* @author HARADA Koichi
*/
	
	C_TEXT:C284($response_t)
	
	$response_t:=""
	This:C1470.send($response_t)
	
	$0:=This:C1470
	
Function format
	
/*
* This method performs content negotiation on the
* Accept HTTP request header if its present.
*
* The first object parameter takes an object:
* MIME-TYPE : FORMULA
* For instance:
* <code>
* {
*     "text/html" : Formula(MethodReturnsText),
*     "application/json" : Formula(MethodReturnsJson),
*     "default" : Formula(MethodReturns406Status)
* }
* </code>
* Then this method look for the mime type that matches 
* with Accept HTTP request header value.
* If one matches, Content-Type header is set to the one found,
* then the corresponding formula is called and
* This of the callee method is set to request object.
* Otherwise default formula is called if it's
* present. If default formula does not present, it
* returns 406 Not Acceptable status.
*
* @param{Object}$1 Object that contains list of acceptable mimetype as key and correspond formula
* @author HARADA Koichi
*/
	
	C_OBJECT:C1216($1; $acceptableMimes_o)
	
	C_COLLECTION:C1488($acceptableMimes_c)
	C_OBJECT:C1216($request_o)
	C_TEXT:C284($mime_t; $matchMime_t)
	
	$acceptableMimes_o:=$1
	
	// populate acceptable mimetype list
	$acceptableMimes_c:=New collection:C1472()
	For each ($mime_t; $acceptableMimes_o)
		
		If (Position:C15("/"; $mime_t)>0)
			
			$acceptableMimes_c.push($mime_t)
			
		End if 
		
	End for each 
	
	$request_o:=This:C1470.__request__
	$matchMime_t:=$request_o.accepts($acceptableMimes_c)
	
	Case of 
		: ($matchMime_t#"")
			
			This:C1470.type($matchMime_t)
			$acceptableMimes_o[$matchMime_t].call(This:C1470)
			
		: ($acceptableMimes_o.default#Null:C1517)
			
			$acceptableMimes_o.default.call(This:C1470)
			
		Else 
			
			This:C1470.sendStatus(406)
			
	End case 
	
Function get
	
/**
* This method returns HTTP response header value
* specified by response header field name.
*
* It returns text type value except when the header
* field name is "Set-Cookie". In this case it returns
* Collection, even though only one "Set-Cookie" header
* resides.
*
* If specified header is not found, it returns empty string or collection.
*
* @param {Text} $1 Field name
* @return {Variant} $0 Header field value (Text or Collection)
* @author HARADA Koichi
*/
	
	C_TEXT:C284($1; $headerName_t)
	C_VARIANT:C1683($0)
	
	C_TEXT:C284($headerValue_t)
	C_COLLECTION:C1488($queryResult_c)
	
	$headerName_t:=$1
	
	$queryResult_c:=This:C1470.__headers__.query("name = :1"; $headerName_t)
	
	Case of 
		: ($headerName_t="Set-Cookie")
			
			If ($queryResult_c.length=0)
				
				$0:=New collection:C1472()
				
			Else 
				
				$0:=$queryResult_c.extract("value")
				
			End if 
			
		Else 
			
			If ($queryResult_c.length=0)
				
				$0:=""
				
			Else 
				
				$0:=$queryResult_c[0].value
				
			End if 
			
	End case 
	
Function json
	
/**
* This method sends JSON response.
* The content will be converted JSON string
* by using JSON Stringify command.
* The Content-Type header is set by Resonse.type("json")
*
* @param {Variant} $1 Any value that can be converted to JSON
* @return {Object} $0 Response object
* @author: HARADA Koichi
*/
	
	C_VARIANT:C1683($1)
	C_OBJECT:C1216($0)
	
	C_TEXT:C284($response_t)
	
	$response_t:=JSON Stringify:C1217($1)
	
	This:C1470.type("json").send($response_t)
	
	$0:=This:C1470
	
Function links
	
/**
* This method is used to populate Link HTTP header.
* When multiple element is given, they are joined with
* comma. When it is called multiple times, the latter 
* will be appended to the former.
*
* The first parameter is object type which consists of
* {
*     "rel-value":"uri"
* }
*
* For instance, the following code:
* {@code
*     res.links({
*         "prev":"https://example.com/page/1",
*         "next":"https://example.com/page/3",
*     })
* }
* will populate follow header:
* Link: <https://example.com/page/1>; rel="prev",
* <https://example.com/page/3>; rel="next"
*
* @param {Object} $1 Link header content
* @return {Object} $0 Response object
* @author HARADA Koichi
*/
	
	C_OBJECT:C1216($1; $links_o)
	C_OBJECT:C1216($0)
	
	C_TEXT:C284($relKey_t; $uri_t)
	
	$links_o:=$1
	
	For each ($relKey_t; $links_o)
		
		$uri_t:=$links_o[$relKey_t]
		This:C1470.append("Link"; "<"+$uri_t+">; rel=\""+$relKey_t+"\"")
		
	End for each 
	
	$0:=This:C1470
	
Function location
	
/**
* This method sets Location response header.
* It does not modify given path. So it is developer's
* responsibility to check validity and encoding of the url.
* When the path parameter is "back", the value of
* Location header will be taken from Referer request header.
* If Referer is not present, "/" is used.
*
* @param {Text} $1 Path value for the Location header
* @return {Object} Response object
* @author HARADA Koichi
*/
	
	C_TEXT:C284($1; $path_t)
	C_OBJECT:C1216($0)
	
	C_COLLECTION:C1488($headers_c; $queryResult_c)
	
	$path_t:=$1
	
	If ($path_t="back")
		
		ARRAY TEXT:C222($headerNames_at; 0)
		ARRAY TEXT:C222($headerValues_at; 0)
		WEB GET HTTP HEADER:C697($headerNames_at; $headerValues_at)
		$headers_c:=New collection:C1472()
		ARRAY TO COLLECTION:C1563($headers_c; $headerNames_at; "name"; $headerValues_at; "value")
		$queryResult_c:=$headers_c.query("name = :1"; "Referer")
		If ($queryResult_c.length=0)
			
			// No Referer header present
			$path_t:="/"
			
		Else 
			
			$path_t:=$queryResult_c[0].value
			
		End if 
		
	End if 
	
	This:C1470.set("Location"; $path_t)
	
	$0:=This:C1470
	
Function redirect
	
/**
* This method is used to tell user agent to redirect
* to the specified path with the specified status code.
* If status code is omitted, it defaults to 302 ("Found").
*
* @param {Longint} $1 Status code (optional)
* @param {Text} $1 or $2 Redirect destination path
* @return {Object} $0 Response object
* @author HARADA Koichi
*/
	
	C_VARIANT:C1683($1)
	C_TEXT:C284($2)
	C_OBJECT:C1216($0)
	
	C_LONGINT:C283($type_l; $statusCode_l)
	C_TEXT:C284($path_t)
	
	$type_l:=Value type:C1509($1)
	
	Case of 
		: ($type_l=Is longint:K8:6) | ($type_l=Is real:K8:4)
			
			// $1 is status code and $2 is path
			$statusCode_l:=$1
			$path_t:=$2
			
		: ($type_l=Is text:K8:3)
			
			// $1 is path
			$statusCode_l:=302
			$path_t:=$1
			
	End case 
	
	This:C1470.status($statusCode_l)
	
	// Set http headers
	$formula_o:=Formula:C1597(RS_setHeaders)
	$formula_o.call(This:C1470)
	
	WEB SEND HTTP REDIRECT:C659($path_t)
	
	$0:=This:C1470
	
Function render
	
/**
* This method renders response text from template 
* and send it.
* 
* The path parameter is the file path to the template.
* It may contain 4D tags (4DTEXT, 4DIF adn so on) that will
* be parsed by PROCESS 4D TAGS command.
*
* The file path accepts POSIX format, relative from
* the path set via HttpServer.setDynamicFolder. It must not
* contain "../" to prevent path traversal, otherwise
* response won't be made.
*
* The Content-Type header is set automatically when the
* template path ends with file extension. When the path
* does not contain extension, you should specify it by calling
* Response.set("Content-Type";"content type") or
* Response.type("file extension or content type").
* 
* Object type second parameter may contain any data that
* you want to pass to PROCESS 4D TAGS command. Then it is
* accesible in the template using $1 directive.
*
* After this function is executed with or without error,
* post process handler function will be called if it is passed.
* If an error had run out, the function receives an error
* collection whose structure is
* [{"message":"error message";"date":"date and time in ISO 8601 format"}].
*
* @param {Text} $1 Path to the template file
* @param {Object} $2 Object that will be passed to PROCESS 4D TAGS (optional)
* @param {Object} $3 Reference to post process handler function (optional)
* @return {Object} $0 Response object
* @author HARADA Koichi
*/
	
	C_TEXT:C284($1; $path_t)
	C_OBJECT:C1216($2; $locals_o)
	C_OBJECT:C1216($3; $callback_o)
	C_OBJECT:C1216($0)
	
	C_TEXT:C284($dynamicFolderPath_t; $errorHandler_t; $systemPath_t; $content_t; $mime_t; $webServerName_t)
	C_LONGINT:C283($numParam_l)
	C_OBJECT:C1216($folder_o; $filePath_o; $file_o)
	C_COLLECTION:C1488($error_c)
	
	//#####
	// Checks prerequisite
	// Target template MUST be searched from inside of dynamicFolder
	// folder to prevent path traversal.
	//#####
	
	$errorHandler_t:=error_try
	
	$path_t:=$1
	
	// The template path MUST not contain "../"
	ASSERT:C1129(Position:C15("../"; $path_t)=0; Current method name:C684+" : Template path cannot contain \"../\".")
	
	// Do not use USE statement here because don't want to block other web processes
	// dynamicFolder folder MUST present
	$webServerName_t:=This:C1470.__webServer__.name
	$folder_o:=Storage:C1525[$webServerName_t].componentOptions.dynamicFolder
	ASSERT:C1129($folder_o.exists; Current method name:C684+" : dynamicFolder folder must exist.")
	
	// If template file path starts with "/", remove it
	While ($path_t="/@")
		
		$path_t:=Substring:C12($path_t; 2)
		
	End while 
	
	$file_o:=$folder_o.file($path_t)
	
	$dynamicFolderPath_t:=$folder_o.platformPath
	$path_t:=$file_o.platformPath
	
	// Again make sure the path still inside dynamicFolder folder
	ASSERT:C1129(Position:C15($dynamicFolderPath_t; $path_t)=1; Current method name:C684+"Template path is out of dynamicFolder folder.")
	
	// Make sure the template file present
	ASSERT:C1129($file_o.exists; Current method name:C684+"Template file cannot be found.")
	
	$numParam_l:=Count parameters:C259
	If (error_catch($errorHandler_t))
		
		If ($numParam_l>=3)
			
			$callback_o:=$3
			$error_c:=error_get
			$callback_o.call(Null:C1517; $error_c)
			
		End if 
		
	Else 
		
		// Prerequisite passed
		
		$errorHandler_t:=error_try
		
		$content_t:=$file_o.getText("UTF-8")
		
		Case of 
			: ($numParam_l=1)
				
				PROCESS 4D TAGS:C816($content_t; $content_t)
				
			: ($numParam_l>=2)
				
				$locals_o:=$2
				PROCESS 4D TAGS:C816($content_t; $content_t; $locals_o)
				
		End case 
		
		This:C1470.type($file_o.extension).send($content_t)
		
		If (error_catch($errorHandler_t))
			
			If ($numParam_l>=3)
				
				$callback_o:=$3
				$error_c:=error_get
				$callback_o.call(Null:C1517; $error_c)
				
			End if 
			
		Else 
			
			If ($numParam_l>=3)
				
				$callback_o:=$3
				$callback_o.call(Null:C1517)
				
			End if 
			
		End if 
		
	End if 
	
	$0:=This:C1470
	
Function send
	
/**
* This method sends HTTP response.
* The body parameter can be Text, Blob, Object or Collection type.
* 
* Content-type header defaults to:
* Text : text/html
* Blob : application/octet-stream
* Object : application/json
* Collection : application/json
* unless previously defined.
*
* When it is Object or Collection, the response will be
* converted to text with JSON Stringify.
*
* @param {Variant} $1 HTTP response body content
* @param {Object} $0 Response object
*/
	
	C_VARIANT:C1683($1)
	C_OBJECT:C1216($0)
	
	C_LONGINT:C283($type_l)
	C_TEXT:C284($content_t; $contentType_t)
	C_OBJECT:C1216($formula_o)
	
	$type_l:=Value type:C1509($1)
	
	Case of 
		: ($type_l=Is text:K8:3)
			$content_t:=$1
			
		: ($type_l=Is object:K8:27) | ($type_l=Is collection:K8:32)
			$content_t:=JSON Stringify:C1217($1)
			
	End case 
	
	$contentType_t:=This:C1470.get("Content-Type")
	
	If ($contentType_t="")
		
		// It is not previously specified.
		// Sets to default
		Case of 
			: ($type_l=Is text:K8:3)
				$contentType_t:="text/html"
				
			: ($type_l=Is object:K8:27) | ($type_l=Is collection:K8:32)
				$contentType_t:="application/json"
				
			: ($type_l=Is BLOB:K8:12)
				$contentType_t:="application/octet-stream"
				
		End case 
		
	Else 
		
		// It is previously specified.
		// Remove it from header storage
		$formula_o:=Formula:C1597(RS_remove)
		$formula_o.call(This:C1470; "Content-Type")
		
	End if 
	
	// Set http headers
	$formula_o:=Formula:C1597(RS_setHeaders)
	$formula_o.call(This:C1470)
	
	// Send response
	Case of 
		: ($type_l=Is text:K8:3) | ($type_l=Is object:K8:27) | ($type_l=Is collection:K8:32)
			
			WEB SEND TEXT:C677($content_t; $contentType_t)
			
		: ($type_l=Is BLOB:K8:12)
			
			WEB SEND BLOB:C654($1; $contentType_t)
			
	End case 
	
	$0:=This:C1470
	
Function sendFile
	
/*
* This method send the file at the given path.
* Content-Type header will be set based on the file extension
* if it is not previously set (when calling Response.download
* function is the case).
*
* The file path accepts POSIX format, relative from
* the path set via HttpServer.setDynamicFolder. It must not
* contain "../" to prevent path traversal,  otherwise
* response won't be made.
*
* The optional options parameter can have following attributes:
* <h3>maxAge</h3>
* Longint
* Sets the max-age property of the Cache-Control header in second.
* Defaults to 0.
*
* <h3>lastModified</h3>
* Boolean
* If true, sets the Last-Modified header to the last modified
* date and time on the OS. Defaults to true.
* 
* <h3>headers</h3>
* Object
* Object containing HTTP headers to serve with the file.
*
* <h3>immutable</h3>
* Boolean
* Enables or disables immutable directive in Cache-Control
* header. When enabled by passing true, maxAge option should
* be specified. Defaults to false.
*
* After this function is executed with or without error,
* post process handler function will be called if it is passed.
* If an error had run out, the function receives an error
* collection whose structure is
* [{"message":"error message";"date":"date and time in ISO 8601 format"}].
*
* @param {Text} $1 Path to the file to be sent
* @param {Object} $2 Options (optional)
* @param {Object} $3 Reference to post process handler function (optional)
* @return {Object} $0 Response object
* @author HARADA Koichi
*/
	
	C_TEXT:C284($1; $path_t)
	C_OBJECT:C1216($2; $options_o)
	C_OBJECT:C1216($3; $callback_o)
	C_OBJECT:C1216($0)
	
	C_TEXT:C284($errorHandler_t; $dynamicFolderPath_t; $systemPath_t; $headerValue_t; $attName_t)
	C_LONGINT:C283($numParam_l)
	C_OBJECT:C1216($callback_o; $filePath_o; $formula_o; $file_o; $folder_o)
	C_COLLECTION:C1488($error_c)
	
	//#####
	// Checks prerequisite
	// Target file MUST be searched from inside of dynamicFolder
	// folder to prevent path traversal.
	//#####
	$errorHandler_t:=error_try
	
	$path_t:=$1
	
	// The file path MUST not contain "../"
	ASSERT:C1129(Position:C15("../"; $path_t)=0; Current method name:C684+" : File path cannot contain \"../\".")
	
	// Do not use USE statement here because don't want to block other web processes
	// dynamicFolder folder MUST present
	$webServerName_t:=This:C1470.__webServer__.name
	$folder_o:=Storage:C1525[$webServerName_t].componentOptions.dynamicFolder
	ASSERT:C1129($folder_o.exists; Current method name:C684+" : dynamicFolder folder must exist.")
	
	// If file path starts with "/", remove it
	While ($path_t="/@")
		
		$path_t:=Substring:C12($path_t; 2)
		
	End while 
	
	$file_o:=$folder_o.file($path_t)
	
	$dynamicFolderPath_t:=$folder_o.platformPath
	$path_t:=$file_o.platformPath
	
	// Again make sure the path still inside dynamicFolder folder
	ASSERT:C1129(Position:C15($dynamicFolderPath_t; $path_t)=1; Current method name:C684+"File path is out of dynamicFolder folder.")
	
	// Make sure the file present
	ASSERT:C1129($file_o.exists; Current method name:C684+"Template file cannot be found.")
	
	$numParam_l:=Count parameters:C259
	If (error_catch($errorHandler_t))
		
		If ($numParam_l>=3)
			
			$callback_o:=$3
			$error_c:=error_get
			$callback_o.call(Null:C1517; $error_c)
			
		End if 
		
	Else 
		
		// Prerequisite passed
		
		// Sets Content-Type header if it's not previously set
		If (This:C1470.get("Content-Type")="")
			
			If ($file_o.extension#"")
				
				This:C1470.type($file_o.extension)
				
			End if 
			
		End if 
		
		// Set options
		If ($numParam_l>=2)
			
			$options_o:=$2
			
			If ($options_o.maxAge#Null:C1517)
				
				$headerValue_t:="max-age="+String:C10($options_o.maxAge)
				
				Case of 
					: ($options_o.immutable=Null:C1517)
					: ($options_o.immutable=False:C215)
					Else 
						
						$headerValue_t:=$headerValue_t+", immutable"
						
				End case 
				
				This:C1470.set("Cache-Control"; $headerValue_t)
				
			End if 
			
			Case of 
				: ($options_o.lastModified=Null:C1517)
				: ($options_o.lastModified=False:C215)
				Else 
					
					$headerValue_t:=String:C10($file_o.modificationDate; Date RFC 1123:K1:11; Time:C179($file_o.modificationTime))
					This:C1470.set("Last-Modified"; $headerValue_t)
					
			End case 
			
			If ($options_o.headers#Null:C1517)
				
				For each ($attName_t; $options_o.headers)
					
					This:C1470.set($attName_t; $options_o[$attName_t])
					
				End for each 
				
			End if 
			
		End if 
		
		// Set http headers
		$formula_o:=Formula:C1597(RS_setHeaders)
		$formula_o.call(This:C1470)
		
		// Then send the file
		// It seems WEB SEND FILE command now accepts
		// absolute path that points outside of
		// HTML root folder set in 4D preferences.
		$errorHandler_t:=error_try
		WEB SEND FILE:C619($path_t)
		
		If (error_catch($errorHandler_t))
			
			Case of 
				: ($numParam_l<3)
				: ($3=Null:C1517)
				Else 
					
					$callback_o:=$3
					$error_c:=error_get
					$callback_o.call(Null:C1517; $error_c)
					
			End case 
			
		Else 
			
			Case of 
				: ($numParam_l<3)
				: ($3=Null:C1517)
				Else 
					
					$callback_o:=$3
					$callback_o.call(Null:C1517)
					
			End case 
			
		End if 
		
	End if 
	
	$0:=This:C1470
	
Function sendStatus
	
/**
* This method sets response HTTP status code and send its
* text representation as the response body.
*
* @param {Longint} $1 HTTP status code
* @return {Object} $0 Response object
* @author HARADA Koichi
*/
	
	C_LONGINT:C283($1; $statusCode_l)
	C_OBJECT:C1216($0)
	
	C_TEXT:C284($statusText_t)
	
	$statusCode_l:=$1
	
	$statusText_t:=RS_getStatusText($statusCode_l)
	
	This:C1470.status($statusCode_l).send($statusText_t)
	
	$0:=This:C1470
	
Function set
	
/**
* This method sets the specified value to the
* specified HTTP response header field.
* If the header is not already set, it creates
* the field. If it is already present, it is overwritten.
*
* @param {Variant} $1 Field name (Text) or name-value pair (Object)
* @param {Text} $2 Field value when $1 is field name
* @return {Object} $0 Request object
* @author HARADA Koichi
*/
	
	C_VARIANT:C1683($1)  // Text or Object
	C_TEXT:C284($2)
	C_OBJECT:C1216($0)
	
	C_OBJECT:C1216($headersToSet_o)
	C_TEXT:C284($name_t; $value_t; $fieldName_t)
	
	$type_l:=Value type:C1509($1)
	
	Case of 
		: ($type_l=Is text:K8:3)
			
			$headersToSet_o:=New object:C1471($1; $2)
			
		: ($type_l=Is object:K8:27)
			
			$headersToSet_o:=$1
			
	End case 
	
	For each ($name_t; $headersToSet_o)
		
		$value_t:=$headersToSet_o[$name_t]
		
		// Removes current entry
		This:C1470.__headers__:=This:C1470.__headers__.query("name != :1"; $fieldName_t)
		
		// Then add new one
		This:C1470.__headers__.push(New object:C1471("name"; $name_t; "value"; $value_t))
		
	End for each 
	
	$0:=This:C1470
	
Function status
	
/**
* This method sets the HTTP status code for the response.
*
* @param {Longint} $1 Status code
* @return {Object} $0 Response object
* @arthor HARADA Koichi
*/
	
	C_LONGINT:C283($1; $statusCode_l)
	C_OBJECT:C1216($0)
	
	C_TEXT:C284($statusText_t)
	
	$statusCode_l:=$1
	
	$statusText_t:=RS_getStatusText($statusCode_l)
	
	This:C1470.set("X-STATUS"; String:C10($statusCode_l)+" "+$statusText_t)
	
	$0:=This:C1470
	
Function type
	
/**
* This method sets Content-Type header to the MIME type
* as determined by MT_get method for the specified type.
* If type contains "/" character, it sets Content-Type to type.
*
* @param {Text} $1 Type parameter that can be file extension or mime type.
* @return {Object} $0 Response object
* @author HARADA Koichi
*/
	
	C_TEXT:C284($1; $type_t)
	C_OBJECT:C1216($0)
	
	C_COLLECTION:C1488($queryResult_c)
	
	$type_t:=$1
	
	If (Position:C15("/"; $type_t)=0)
		
		Case of 
			: (Length:C16($type_t)=0)
				
			: ($type_t[[1]]#".")
				
			Else 
				
				// removes the first period.
				$type_t:=Substring:C12($type_t; 2)
				
		End case 
		
		// Do not use USE statement here because don't want to block other web processes
		If (Storage:C1525.__mimeTypes__#Null:C1517)
			
			$queryResult_c:=Storage:C1525.__mimeTypes__.query("extension = :1"; $type_t)
			If ($queryResult_c.length=1)
				
				$type_t:=$queryResult_c[0].mimetype
				
			End if 
			
		End if 
		
	End if 
	
	If ($type_t#"")
		
		This:C1470.set("Content-Type"; $type_t)
		
	End if 
	
	$0:=This:C1470
	
Function vary
	
/**
* This method is used to set Vary header,
* if it is not already specified.
*
* @param {Text} $1 Vary field value
* @return {Object} $0 Response object
* @author HARADA Koichi
*/
	
	C_TEXT:C284($1; $value_t)
	C_OBJECT:C1216($0)
	
	C_TEXT:C284($currentValue_t)
	
	$value_t:=$1
	
	$currentValue_t:=This:C1470.get("Vary")
	
	If ($currentValue_t="")
		
		This:C1470.set("Vary"; $value_t)
		
	End if 
	
	$0:=This:C1470
	